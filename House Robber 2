class Solution {
    public int rob(int[] nums) {
        boolean flag=false;
        if(nums.length == 0){
            return 0;
        }
        if(nums.length == 1){
            return nums[0];
        }
        if(nums.length == 2){
            return Math.max(nums[0],nums[1]);
        }
        if(nums.length == 3){
            return Math.max(Math.max(nums[0],nums[1]),nums[2]);
        }
        return Math.max(helper(nums,0,nums.length-2),helper(nums,1,nums.length-1));
        
    }
    public int helper(int[] nums,int start,int end){
        
        int len = end-start+1;
        int[] dp = new int[len+1];
        dp[0]=0;
        dp[1] = nums[start];
        int j = 2;
        if(start == 1){
           for(int i = 2;i<len+1;i++){
               dp[i] = Math.max(dp[i-1],nums[i]+dp[i-2]);
           } 
        }
        else {
            for(int i = 2;i<len+1;i++){
            dp[i] = Math.max(dp[i-1],nums[i-1]+dp[i-2]);
        }
        }
        
        return dp[len];
    }
}
