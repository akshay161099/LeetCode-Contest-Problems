//{ Driver Code Starts
import java.io.*;
import java.util.*;
import java.lang.*;

class GFG {
    public static void main(String args[]) throws IOException {
        BufferedReader br =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine().trim());

        while (t-- > 0) {
            String inputLine[] = br.readLine().trim().split(" ");
            int n = Integer.parseInt(inputLine[0]);

            int start[] = new int[n];
            int end[] = new int[n];

            inputLine = br.readLine().trim().split(" ");
            for (int i = 0; i < n; i++)
                start[i] = Integer.parseInt(inputLine[i]);

            inputLine = br.readLine().trim().split(" ");
            for (int i = 0; i < n; i++) 
                end[i] = Integer.parseInt(inputLine[i]);
                
            int ans = new Solution().maxMeetings(start, end, n);
            System.out.println(ans);
        }
    }
}

// } Driver Code Ends

class solution{
    int start;
    int end;
    int pos;
    solution(int start, int end, int pos){
        this.start = start;
        this.pos = pos;
        this.end = end;
    }
}

class ComparatorMeet implements Comparator<solution>{
    @Override
    public int compare(solution object1, solution object2){
        if(object1.end > object2.end){
            return 1;
        }
        else if(object1.end < object2.end){
            return -1;
        }
        else if(object1.pos < object2.pos){
            return -1;
        }
        return 1;
    }
    
}
class Solution 
{
    //Function to find the maximum number of meetings that can
    //be performed in a meeting room.
    public static int maxMeetings(int start[], int end[], int n)
    {
        ArrayList<solution> list = new ArrayList<>();
        ComparatorMeet meet = new ComparatorMeet();
        for(int i = 0;i<n;i++){
            list.add(new solution(start[i],end[i],i));
        }
        ArrayList<Integer> result = new ArrayList<>();
        Collections.sort(list, meet);
        int temp = list.get(0).start;
        int limit = list.get(0).end;
        result.add(list.get(0).pos);
        
        for(int i = 1;i<n;i++){
            if(list.get(i).start > limit){
                result.add(list.get(i).pos);
                temp = list.get(i).start;
                limit = list.get(i).end;
            }
            
        }
        return result.size();
        
    }
}
